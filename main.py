#!/usr/bin/env python2
"""
   NORX reference Python2 implementation.
   ------

   :copyright: (c) 2014 by Philipp Jovanovic <philipp@jovanovic.io>.
   :license: CC0, see LICENSE for more details.
"""
from struct import unpack as load
from struct import pack as store
from norx import NORX

def vectors_G(w,i):

    x = {
        32: [ (0x00000001, 0x00000000, 0x00000000, 0x00000000),
              (0x00002001, 0x42024200, 0x21010100, 0x20010100),
              (0x8E6E6E29, 0x8783068E, 0x0FAD8F6F, 0x6D4A8F0C),
              (0x9D6D8718, 0xB987D564, 0xC7474857, 0x24F32605),
              (0xC291D60D, 0x19A0D5EA, 0xF0E0D424, 0xC473BBA3),
              (0x35F2578F, 0x853DBE90, 0x195D7490, 0x149F61EC),
              (0xAF557EEA, 0xC53796FE, 0x163271AC, 0x4E4F5CFB),
              (0xDBA043BC, 0x6C09B0BE, 0x4D7D55A3, 0x4425E08E),
              (0x44912C86, 0xE215F517, 0xD0614027, 0xA094B0F2),
              (0x88980FED, 0x27B1DE05, 0x79A35152, 0x3DCCE71E),
              (0xBD333CDB, 0xC51A4ECA, 0x6DA7579C, 0xF9F141A0),
              (0x9F85298E, 0xF2ACF75A, 0xD4CEBDA4, 0xD5A4BA0E),
              (0xFA2D9998, 0x3BD8B744, 0xAFE0677A, 0x1CBE34B0),
              (0x72B826FD, 0x30355A44, 0xD6CE9703, 0x7CC51E11),
              (0xC7053F6D, 0xD35DA308, 0xCD1616B8, 0x170BE75B),
              (0x29F7F20E, 0x3256FD7D, 0x068E6667, 0xAB330772)
            ],
        64: [ ( 0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000 ),
              ( 0x0000002000000001, 0x4200004002020000, 0x2100000001010000, 0x2000000001010000 ),
              ( 0x82600C6C420A0C61, 0x9CC80A07051612D8, 0x0E04090FC283050C, 0x6C22090F6183020C ),
              ( 0xCFE22B520239332F, 0x1A1C7E83367612BF, 0x7CD42AB6581A2C29, 0x4D6E1FA833FA9021 ),
              ( 0x3D5E2BDE88AFF93B, 0xECC8D95156DCEC38, 0x0A0446A133EE8271, 0xC0F5AC2CAED2D2BB ),
              ( 0xC3C467FE58784143, 0x3C97782DEEAC5790, 0x44843BC64A41A7D8, 0xB25B09F9540B8D94 ),
              ( 0xAC67C4758EDABE16, 0xC321E8CE8496C5ED, 0x2FBCC28DAA1D48B5, 0xA3FCA8310FEB2BC4 ),
              ( 0x4CE9BEBB0DD254A6, 0x4F2485BE02121466, 0xC67650560B60EF00, 0xBF0EDED6FE7B2547 ),
              ( 0xC2C12A34D0D5FD94, 0x1C191DA55351ADFA, 0x4149F615635943F5, 0xD8772462D909E5A8 ),
              ( 0x377F4E2380FD20F6, 0x3F886AF0AE6DF23C, 0x47611212B6E0C0B6, 0x203B070E18D179E3 ),
              ( 0xBBEA67F79ED0A639, 0x2348E7B04B8FE61F, 0xC4A0C4BDD549E690, 0x4002E63DD2FAACBB ),
              ( 0x5BD7374482BCD0AE, 0xE465F7287EA1095B, 0x4F9713BAFD0E5037, 0xED98AE740EF44907 ),
              ( 0x9D12266D61EF2E4B, 0x3F82247049FFDACF, 0x01DA8A38AC6DB80D, 0x6D791887DB7BC086 ),
              ( 0xCF409F3F352535F6, 0x0E03BB546CA18FF7, 0xF1FD88CBBC37921F, 0x6D6F5580D65BB572 ),
              ( 0xA15E9AA4D3881354, 0xF042F1E89CECFFD3, 0x2C3DF0918FBD9D82, 0xE3104F8E503EEEB7 ),
              ( 0xF487F38AFF72BCE1, 0x99081BA0BCA194B5, 0x2B8AA44DCF5F3898, 0x8F7C4CF6C564757A )
            ]
    }

    return x[w][i]


def vectors_F(w,i):

    x = {
        32: [ (0x00000001, 0x00000000, 0x00000000, 0x00000000,
               0x00000000, 0x00000000, 0x00000000, 0x00000000,
               0x00000000, 0x00000000, 0x00000000, 0x00000000,
               0x00000000, 0x00000000, 0x00000000, 0x00000000 ),

              (0x04004001, 0x20200400, 0x20042020, 0x4A4A8A08,
               0x01880885, 0x8A424A40, 0x4A024A02, 0xC24A0248,
               0x41212104, 0x888C4C4A, 0x41210520, 0x05212101,
               0x05012000, 0x20202004, 0x884A4A08, 0x40210500 ),

              (0xEFDB6055, 0x4EB0C8FD, 0x4D66BAD5, 0xA5716F6F,
               0x3315BA06, 0xB5E09122, 0x44A18E71, 0x51E36297,
               0xF137B870, 0x3C7265F6, 0x00C30D5B, 0x295A09AA,
               0xB42B85E7, 0xAC007723, 0x742077A7, 0x4BADCF9B ),

              (0xB49E8FA1, 0xB87AED22, 0x86152D27, 0xBEB398AD,
               0xBD48EB80, 0x1D4447DA, 0xB7458BA9, 0xA9E9EF9B,
               0xF7599C6A, 0x203FB309, 0x694A1283, 0xC4875743,
               0xF4E78B62, 0x50BE8206, 0x7BEF5DF7, 0xF92F6B9C ),

              (0xD8936EA9, 0x4FDFA7F9, 0x2E23D116, 0xED7C3692,
               0x3E463C40, 0xA5AA5D55, 0xA05A6E11, 0xD22C7D58,
               0x3C0D461D, 0x5D78E74F, 0x88C9121B, 0xECA4CA13,
               0xE12928CB, 0x0167E06D, 0x90E1494E, 0x7CBBCCDA ),

              (0xDC4D4AE5, 0x2EA22D30, 0x0F46317D, 0x61B76178,
               0x317CF942, 0xAA617101, 0xB1B646B0, 0x9FB8201C,
               0x31E77E87, 0x0E87682D, 0xAB27674A, 0x1C00EF33,
               0x49676DA0, 0x5E36BB3F, 0x369CB43A, 0xF6E575E8 ),

              (0x472112C6, 0xEBBA21DD, 0x69FAF1B0, 0x06AADA3C,
               0x958968BA, 0xFAF43AF0, 0x8A346D6C, 0x04DAD629,
               0x28C63C70, 0xF49BAA13, 0x57DE5F7C, 0x28841E18,
               0xEA3F594F, 0x8D744A62, 0x57B54FF1, 0x753A4160 ),

              (0x865ACF57, 0x0B1CD341, 0x44571AAD, 0x1E351C75,
               0x679AB711, 0x8D923CDC, 0x115DC180, 0xCF5E7435,
               0x94D66EB3, 0x6B643DA7, 0xC71FD3A8, 0xEACD114A,
               0xFE5A4582, 0x101A0A61, 0xDEF929CE, 0xF81307CE ),

              (0xEE830EF5, 0xEFEDB52C, 0xD9B5DDE0, 0x11699703,
               0xA59F827F, 0xE7DA769E, 0x9ACF9688, 0xFE6B4EE6,
               0x2D99EFFF, 0xC1F42728, 0x1B33FCE4, 0x2484C32D,
               0x454DEF51, 0x65220E90, 0xD8B53023, 0x10265221 ),

              (0x5BA9F23B, 0x4BF4491B, 0xAEF87C06, 0xADCB6C25,
               0x84A8D85E, 0x06C4583B, 0xA845E529, 0xE9B02D7F,
               0xEE6C0E9B, 0xDEC3200A, 0x6C54629E, 0xB511AD99,
               0x3D9F13B9, 0xB8D1EDA8, 0x864F0FFA, 0x12F8AF0B ),

              (0xA61FD7E0, 0xFF35B59A, 0xF69A212D, 0x47A15ADD,
               0x55D610B0, 0xF029E3EB, 0x0C00141B, 0xDB2E13A3,
               0x6804E008, 0x873E90C3, 0x74385699, 0x04D9596B,
               0x415BB241, 0xBABB116D, 0x9E823917, 0xE2DE402B ),

              (0x9041779F, 0x33B0A06B, 0xA3B26416, 0x8A15CD3C,
               0x690B4EF7, 0x31FAFE50, 0xE588204D, 0x7F2B5954,
               0xD42B9E7B, 0x07A1E0D7, 0xBAD18B76, 0x6EDAC458,
               0x5E73F7CA, 0xB3EC7D7C, 0x13822907, 0x34427635 ),

              (0xE706F4FD, 0xF789B2AD, 0x0B0FA1F9, 0x46D2ADFD,
               0xA838E222, 0xE5E99CE6, 0x99AC76DD, 0x19D0101A,
               0x73F58246, 0xC6C1CB88, 0x05985586, 0xFED36478,
               0x0CB8A89B, 0x560C0D0B, 0x96B6CBFF, 0x738DBBBE ),

              (0x26A1AE25, 0xC23C5F1A, 0x97569C36, 0x45630F28,
               0xF7A7003A, 0x3E3F1431, 0x5BFE2226, 0x9C1B8620,
               0x96FB64B1, 0xDA975336, 0xFD3DC3EE, 0xEFAC8EED,
               0xD0A74E35, 0x4CCE7985, 0xA73D02BC, 0x7E819839 ),

              (0x0EB1BCE0, 0x315AFC74, 0xDBAECA2E, 0x7451F4BF,
               0xACAB0D51, 0xE8385576, 0x86F03E6B, 0x016AE48C,
               0xE231BB88, 0xDB29BED0, 0xEC2622DE, 0x7F6F0F74,
               0x10A3EE22, 0x7F5E0DA3, 0x5AACEB4B, 0x3B2FB855 ),

              (0x340B3FA8, 0x8B4EE0F6, 0xEB62C2D7, 0x9AF0EC8E,
               0x431C83CB, 0x79E0F0D6, 0xD83AEA5E, 0x18D2DA56,
               0xA008685C, 0xCB836339, 0xF6ED4128, 0x7A9FC592,
               0x1F7B1AD6, 0x0E1DC227, 0x3EB20808, 0xC12CE387 ),
            ],


        64: [ (0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
               0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
               0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
               0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000 ),

              (0x0000004000000401, 0x2020000400000000, 0x2000042000000020, 0x42400888420A0840,
               0x1008008580981891, 0x8240004842020800, 0x4800020A00420200, 0xC200084042420048,
               0x4100000021210004, 0x8844080A80440408, 0x4120000421010000, 0x0420010100210100,
               0x0400010100200000, 0x2000000020200004, 0x8802080A40420208, 0x4020000401010000 ),

              (0x9D802FD127A732A1, 0xBFDC94FCF7EDB4F6, 0x50E28C54A198AD0E, 0x09FCDB8FCCC9DDA8,
               0x7ACEC81E5BAA6D25, 0x10C9CBCF5BFEFC27, 0x11A152F2C1A43FCA, 0x6BA77CCFA2D9F407,
               0x0E03AD8E4F36AD96, 0xB405D697E680A2BB, 0x3651B1301374F05D, 0xEC2A3CD28E701034,
               0xD793C96953AA22B3, 0x81B56FC8F78827DD, 0xA5F18C894182A861, 0xF95F620C599E1A7D ),

              (0x6D9C774FB118B930, 0x0AD4888256442919, 0xB2625AFA68288616, 0x3F682524B541B12D,
               0x09FB30C77ED1253C, 0xD276B00A56FA3BB2, 0xD1A3ED2B432628E0, 0x59DE47C408703466,
               0x730C85F6CF7CD9B4, 0xD731F331C620402D, 0x664456562656A61E, 0x10F001A72ABF1CCA,
               0xE04F26164B84BCD5, 0xE1CE43EA4AC71790, 0xBE0A7BDA26AB8C3E, 0x083CB972BE746F0D ),

              (0x9AE671BAC4106A33, 0x2532A3AF80EB8C24, 0x8807B8748AAF89BB, 0xCCBD275D7AC0180C,
               0x9E3C9A644E2EE2B1, 0x6EF830BF37A17BB2, 0xA56A3F09DA96ABC9, 0x6674A590854EA97D,
               0xD58BFB1A8D2677C5, 0x5696D8DEA26A6D6D, 0x2E973803C96922A4, 0x9C8EC44641A390FD,
               0xABE2F120F069F77A, 0x305FE9E02B725884, 0x1D2A9380316FE1A6, 0x8FA5B15C10F77415 ),

              (0xE7BC1BB342393A06, 0x4497F473D8AE5B3A, 0x238B885A51663B54, 0xFCFD9F88948D42A7,
               0x5B6E332077A59C5D, 0xC798AA981789AC8D, 0xF916664458B5AD3F, 0xF7086A16B2407A56,
               0x8DD6CEC45AC62D09, 0x2C217A7DC1AB282C, 0x8AA14855B8A7A065, 0x1BA096650A8E8F6D,
               0x9ECAB9E7A91D59FE, 0xA57F363A65CF10D3, 0xF16FCED7A605DFE9, 0xC02D0A46B23E8C31 ),

              (0x2FCA68C9B1691627, 0x59E2B79D4B2A88F8, 0xD44A3CC624C9028F, 0x6295CCEC81F0F5AF,
               0xAFBA11EEC8CE43A4, 0xA6BC58426BDAB6AC, 0xC9FA0754D15A38A6, 0x61B7C093B862D551,
               0xB7A8A66A9227EE06, 0x17BEF1A5F98B7250, 0xCCAA13033F5ADCD3, 0x15CBCEF3A8A993B5,
               0x2E321403DA39690B, 0xD805E663071507B0, 0x6D7EBAA185FF9F07, 0x64071C2C7A0205EA ),

              (0xBF643FF50F9B521B, 0xD6ECDEF9B9AC18B0, 0x29C44312EB0ED72A, 0x6AA97E4B4BF39E0A,
               0xA957D54C2B38DF1B, 0x23E4928A7504F6B8, 0x6CFEE0C2D418DC84, 0x10464EB477E6D548,
               0x18A96DABB8BBC145, 0x406A6EE1C806F1E4, 0xA54BD0A7B7291B4A, 0x27BC2F8593DD77BE,
               0x3BE8FF6116D7AFB0, 0x4D78AEB59B3A9C25, 0x9F03C664A44601DC, 0xDDBE9B34DA020E59 ),

              (0xF51507DD9E95189F, 0xAB5E0B1641FAD08F, 0x09B7BF70943B60DE, 0xE35D03636672DACD,
               0x1D013C731A134DCD, 0x850FC95D9CA677C8, 0x48D78D3658CBE8D0, 0x3898A93514FBF49D,
               0x8849E2B60F59D433, 0xA1C7E702A391D4B9, 0xC0057990DE07D3EE, 0x6BBF9A8B0E6CB108,
               0x7DE67998BA91A9CE, 0x68F2B4BC4B8F6A52, 0x4EFE2C5711E64647, 0x27173B06EFB20807 ),

              (0x002D7BC6826E5C4E, 0x98EAB016A3E7207F, 0x256F87371014F66D, 0x6D9F12AF7B51BA9A,
               0xDF7D5DFDED1E7078, 0xE24E4E023117F906, 0xD3BB9C3FE292CE3D, 0xA67A8CE3BE764D9E,
               0x45A7A7E1DBA2E0AA, 0x5D54BBDD7E640E1D, 0x088696EC342398E7, 0x5542ABB8B94BB46B,
               0x35DC03910937D57B, 0x7A726243CEE6D7DA, 0x8562A88AA0E1FF37, 0x7B49C51D5DF11672 ),

              (0x68B23861E57C9B05, 0xF213CDD14E146238, 0x0E2123C3E9EC08A3, 0x9C6E6D6DAA93B9ED,
               0xA5702C464CC5B083, 0x3A6519BEB2F56890, 0x58F28DC1E45BF8DB, 0xDEF3C026B70B8321,
               0x1E67BF80DAF92084, 0x6CF77997E48644FE, 0xC9B7FA02D70DB5AC, 0x3FDC30C21AEE5282,
               0x3D6CBA696BA6DD93, 0x244DBB6790CCB37D, 0xD0E6766D04FAE591, 0x2B8B936EEC644EF5 ),

              (0x256DC2FF6DE0A8F9, 0xC8283552487D4780, 0x36E9CA389070DCA5, 0xEFB083848F8A3405,
               0x384CDB03F49E7149, 0x7DE9B6194F547AAF, 0xC492972CC2C2E3DE, 0x32D560A0FFD100C7,
               0x66EDB88FB0A8ED53, 0xFC22F84560B7ABAF, 0x9A63F2BF0970DC84, 0x123A7129FF26A569,
               0x555B49259E70FD2B, 0xA79F97997F5A58B5, 0x1399D5D5EC0BD97A, 0x110FC0B750934E61 ),

              (0x79970BBA797F440D, 0xB0459551EFD2E5A0, 0xE140D289FE653F5A, 0xC8FC4FD63D554F1A,
               0x37E8BBE4772E3497, 0x2927C042216E82B4, 0xBE2D1C1DA47865A1, 0x5A50DCF8AE92DF6B,
               0x8A7CB9A29451499B, 0x2FC455A75270E7D3, 0xA5D94AC009584F4B, 0x2B6A365256A121AF,
               0x8268A2C7ACA0B4CB, 0xFB6D0AADC42F2F25, 0x3D853A4E3B481849, 0xF123FE58267C3EF7 ),

              (0x1B448E8F92662327, 0x3591F3F3E586BB58, 0xD6886C54B54AB965, 0x4AD24A7E75C843E0,
               0x907F731206F383F4, 0xB7C30BE4C9CB308C, 0x4FEC526992D7DF72, 0x9D095158BAA00FED,
               0x15E38D27D3CBEA58, 0x5AC80DB9250ED949, 0x131066D58338BA8D, 0x921424D98DFB5ED2,
               0xB0E50C530C665E5F, 0x3B8D7BBCD6CFE748, 0x0F91216102B8C6B9, 0xDF3FBE9627CF0CB7 ),

              (0x7DD0542A032CC09D, 0xCD428DF51AD1B8FC, 0xFFF2139B160E45B6, 0x56CE164150489EB3,
               0x0264062B41CE6E01, 0xFEA2C239875FA55F, 0x9D8BBA9828A7F43B, 0xB1C12516C2FB1DE8,
               0x4943B0FC28BB7A36, 0xE54B13E241E5CC89, 0x882C0750BDA3EB7C, 0x97028319155939DE,
               0x441CD99CD0C48940, 0xD3B65696FF5B41E9, 0x5A0E09FA7BCCF7BC, 0x41523B4C1E564872 ),

              (0xF2DC521CEBDE2E3D, 0xC0921B301794BED5, 0x7BCBEFD874ABE56B, 0x35872E5C29899E44,
               0xFDE750453067080B, 0xAEFE0DEA33D8EE2A, 0x8E1741A7DEC189D0, 0x897240121D56DCD3,
               0x52CA19E5C5DD54BF, 0xF0589BCF1B050432, 0x52AED8532DE4DD9E, 0xC11492B2FC68D82E,
               0x0D4EA16E832DA7F3, 0xAE57C79E053DF9C2, 0xCC9358DDA6A3320C, 0xD45F711CE4BDDE7C ),
            ],
    }

    return x[w][i]

def print_vector(x,ws):
    s = ''.join(["{:0",str(ws/4),"X}, "] * 3 + ["{:0",str(ws/4),"X}"])
    print s.format(x[0],x[1],x[2],x[3])

def print_state(S,ws):
    print_vector([S[ 0],S[ 1],S[ 2],S[ 3]],ws)
    print_vector([S[ 4],S[ 5],S[ 6],S[ 7]],ws)
    print_vector([S[ 8],S[ 9],S[10],S[11]],ws)
    print_vector([S[12],S[13],S[14],S[15]],ws)
    print

def test_G():
    # check G function
    for ws in [32,64]:
        norx = NORX(w = ws)
        x = [1, 0, 0, 0]
        for i in xrange(16):
            if DEBUG:
                print_vector(x)
            assert vectors_G(ws,i) == tuple(x)
            x[0],x[1],x[2],x[3] = norx.G(*x)
        print "NORX{}, G: tests passed.".format(ws)

def test_F():
    # check F function
    for ws in [32,64]:
        norx = NORX(w = ws)
        x = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        for i in xrange(16):
            if DEBUG:
                print_state(x)
            assert vectors_F(ws,i) == tuple(x)
            norx.F(x)
        print "NORX{}, F: tests passed.".format(ws)

def test_enc32():
    pw,pr,pd,pt = 32,4,1,128
    K = [0x00112233,0x44556677,0x8899AABB,0xCCDDEEFF]
    N = [0xFFFFFFFF,0xFFFFFFFF]
    A = [0x10000002,0x30000004]
    P = [0x80000007,0x60000005,0x40000003,0x20000001]
    C = [0xCCABE778,0xB475C97F,0x544B3BC2,0x06DA08D4]
    T = [0xF41C98A9,0xE9BEC3FE,0x80558E88,0x29A994CE]
    k = b''.join([store('<L',K[i]) for i in xrange(len(K))])
    n = b''.join([store('<L',N[i]) for i in xrange(len(N))])
    a = b''.join([store('<L',A[i]) for i in xrange(len(A))])
    p = b''.join([store('<L',P[i]) for i in xrange(len(P))])
    c = b''.join([store('<L',C[i]) for i in xrange(len(C))])
    t = b''.join([store('<L',T[i]) for i in xrange(len(T))])

    norx = NORX(pw,pr,pd,pt)
    cc = norx.aead_encrypt(a,p,'',n,k)
    ct = c+t

    for i in xrange(len(cc)):
        assert cc[i] == ct[i]
    print "NORX{}, enc: tests passed.".format(pw)

def test_enc64():
    pw,pr,pd,pt = 64,4,1,256
    K = [0x0011223344556677,0x8899AABBCCDDEEFF,0xFFEEDDCCBBAA9988,0x7766554433221100]
    N = [0xFFFFFFFFFFFFFFFF,0xFFFFFFFFFFFFFFFF]
    A = [0x1000000000000002,0x3000000000000004]
    P = [0x8000000000000007,0x6000000000000005,0x4000000000000003,0x2000000000000001]
    C = [0x70261529CACFB7ED,0xADEDDCDEF81912B5,0x8D5DB2E73CB9A44E,0x576DD64D38BE869F]
    T = [0x97F45179DE5D5804,0xE47E0A8FA7B157D0,0xAD4E6B119FE2FEF2,0x939490F32AADB1B9]
    k = b''.join([store('<Q',K[i]) for i in xrange(len(K))])
    n = b''.join([store('<Q',N[i]) for i in xrange(len(N))])
    a = b''.join([store('<Q',A[i]) for i in xrange(len(A))])
    p = b''.join([store('<Q',P[i]) for i in xrange(len(P))])
    c = b''.join([store('<Q',C[i]) for i in xrange(len(C))])
    t = b''.join([store('<Q',T[i]) for i in xrange(len(T))])

    norx = NORX(pw,pr,pd,pt)
    cc = norx.aead_encrypt(a,p,'',n,k)
    ct = c+t

    for i in xrange(len(cc)):
        assert cc[i] == ct[i]
    print "NORX{}, enc: tests passed.".format(pw)


if __name__ == '__main__':

    DEBUG = False

    test_G()
    test_F()
    test_enc32()
    test_enc64()





    #a = '\x02\x00\x00\x01\x04\x00\x00\x03'
    #m = ''
    #for i in xrange(norx.BYTES_RATE):
    #    x = norx.pad(m)
    #    for y in x:
    #        print "{:02X}".format(ord(y)),
    #    print
    #    m += chr(i)












